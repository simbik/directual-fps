{"version":3,"sources":["webpack:///js/4.6b82fbb55ae19be49359.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["webpackJsonp","616","module","exports","self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","this","map","forEach","append","Array","isArray","header","Object","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","length","i","fromCharCode","join","bufferClone","slice","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","isDataView","_bodyArrayBuffer","ArrayBuffer","isArrayBufferView","Error","get","type","rejected","then","text","decode","json","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","url","credentials","mode","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","fetch","e","viewClasses","obj","DataView","isView","call","oldValue","has","hasOwnProperty","callback","thisArg","keys","push","values","entries","clone","response","redirectStatuses","redirect","RangeError","location","init","request","xhr","XMLHttpRequest","getAllResponseHeaders","responseURL","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"js/4.6b82fbb55ae19be49359.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 616:\n/***/ (function(module, exports) {\n\n(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// js/4.6b82fbb55ae19be49359.js","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 616\n// module chunks = 4"],"sourceRoot":""}